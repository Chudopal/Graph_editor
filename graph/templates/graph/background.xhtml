{% load static %}
<html> 
     <head> 
      <title>Edit graph</title>
         <script type="text/javascript" src={% static "graph/js/draw.js" %}></script>
     </head> 
     <body> 
        <svg id="draw" width="1000" height="900" style="background-color:#0B2F3A;" >
        </svg>
        <script>
          
          ns = 'http://www.w3.org/2000/svg';

          var nodes = [];
          var edges = [];

          var draw = document.getElementById("draw");
          var isCreatingEdges = true;
          
          function Node(coordX, coordY){
            this.edgesIn = [];
            this.edgesOut = [];
            this.ball = document.createElementNS(ns, 'circle');
            this.ball.setAttributeNS(null, 'cx', coordX);
            this.ball.setAttributeNS(null, 'cy', coordY);
            this.ball.setAttributeNS(null, 'r', 10);
            this.ball.setAttributeNS(null, 'fill', "#F5A9A9");
            draw.append(this.ball);

            this.ball.addEventListener("mouseover", (e)=>{
              this.ball.setAttributeNS(null, "fill", "#FA5858");
              this.ball.setAttributeNS(null, "r", 20);
            });
          
            this.ball.addEventListener("mouseout", (e) => {
              this.ball.setAttributeNS(null, "fill", "#F5A9A9");
              this.ball.setAttributeNS(null, "r", 10);
            });

            var mouseDown = false;
            var mouseUp = false;
            var mouseMove = false;

            this.ball.addEventListener("mousedown", (e)=>{
              mouseDown = true;
            });

            draw.addEventListener("mousemove", (e)=>{
              if(mouseDown){
                mouseMove = true;
                this.ball.setAttributeNS(null, 'cx', e.clientX);
                this.ball.setAttributeNS(null, 'cy', e.clientY); 
              }
            });

            this.ball.addEventListener("mouseup", (e)=>{
              mouseUp = true;
              if(!mouseMove){
                if(isCreatingEdges){  
                  isCreatingEdges = false;
                  var edge = new Edge(this);
                  this.edgesOut.push(edge);
                  edges.push(edge);
                }else{
                  isCreatingEdges = true;
                  this.edgesIn.push(edges[edges.length - 1]);
                  edges[edges.length - 1].setPosition(edges[edges.length - 1].firstNode.ball.getAttribute("cx"),
                                                      edges[edges.length - 1].firstNode.ball.getAttribute("cy"),
                                                      this.ball.getAttribute("cx"),
                                                      this.ball.getAttribute("cy"),
                                                      10);
                  edges[edges.length - 1].changeEdge = false;
                  mouseMove = true;
                }
              }else{
                this.ball.setAttributeNS(null, 'cx', e.clientX);
                this.ball.setAttributeNS(null, 'cy', e.clientY);
                mouseMove = false;
              }
              mouseDown = false;
              mouseUp = false;
              mouseMove = false;
            });
          }


          function Edge(node){
            this.firstNode = node;
            this.triangle = document.createElementNS(ns ,"polygon");
            this.triangle.setAttributeNS(null, 'fill', '#F2F5A9');
            draw.prepend(this.triangle);
            this.changeEdge = true;
          
            draw.addEventListener("mousemove", (e) => {
              this.setPosition(this.firstNode.ball.getAttribute("cx"),
                               this.firstNode.ball.getAttribute("cy"),
                               e.clientX,
                               e.clientY,
                               this.firstNode.ball.getAttribute("r"));
            }); 

            this.setPosition = function(beginX, beginY, endX, endY, r){
              if(this.changeEdge){
                var coords =  endX + "," + endY + " ";
                var tgOfNearAngle = (beginY - endY) / 
                (beginX - endX);
                var tgOfAngle = Math.tan(Math.PI/2 - Math.atan(tgOfNearAngle));
                var xDelta = r / Math.sqrt(tgOfAngle*tgOfAngle + 1);
                var yDelta = xDelta*tgOfAngle;
                coords += (Number(beginX) + xDelta) + "," +
                (Number(beginY) - yDelta) +  " " +
                (Number(beginX) - xDelta) + "," +
                (Number(beginY) + yDelta);
                this.triangle.setAttributeNS(null, 'points', coords);
              }
            };
          }


          draw.addEventListener("dblclick", (e)=>{
            var node = new Node(e.clientX, e.clientY);
            nodes.push(node);
          });

        </script>
     </body> 
 </html> 